<!DOCTYPE html>
<html lang="en">
    <head>
        <!-- jquery-related libs -->
        <link rel="stylesheet" href="/css/style.css">
        <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="http://ec2-35-163-6-36.us-west-2.compute.amazonaws.com/js/lib/touch_punch.min.js"></script>

        <meta charset="utf-8">        
        <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    </head>
    <body>
        <div id="heightSlider"></div>
        <div id="distanceSlider"></div>
        <script src="http://ec2-35-163-6-36.us-west-2.compute.amazonaws.com/js/build/three.min.js"></script>
        <script src="http://ec2-35-163-6-36.us-west-2.compute.amazonaws.com/js/lib/TrackballControls.js"></script>
        <script src="http://ec2-35-163-6-36.us-west-2.compute.amazonaws.com/js/loader/PLYLoader.js"></script>

        <script src="http://ec2-35-163-6-36.us-west-2.compute.amazonaws.com/js/detector.js"></script>
        <script src="http://ec2-35-163-6-36.us-west-2.compute.amazonaws.com/js/lib/stats.min.js"></script>
        <div id="progress">
            <span id="message">Loading ...</span>

            <center>
                <div id="progressbar"><div id="bar"></div></div>
            </center>
        </div>
        <script>
            /*
             * Add some Jquery code to slide around camera height, distance
            $( function() {
                //TODO remove these and use scroll handlers and click and drag 
                $( "#heightSlider" ).slider({
                    min: 0,
                    max: 10000000,
                    value: 500000,
                    slide: function(event, ui) {
                        camera.position.y = ui.value*0.000001;
                    }
                });

                $( "#distanceSlider" ).slider({
                    min: 0,
                    max: 10000000,
                    value: 500000,
                    slide: function(event, ui) {
                        camera.fov = ui.value*0.00001;
                        camera.updateProjectionMatrix();
                    }
                });
            });
            /*
             * Source code copied from example source... let's try to better understand this
             * then put it into its own javascript source file
             */

            if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

            var container, stats;

            var camera, scene, renderer;

            var cameraTarget;

            var rotateCamera = false;

            var cube;

            init();
            animate();

            function init() {

                container = document.createElement( 'div' );
                document.body.appendChild( container );

                camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 600 );
                camera.position.set( 0, 0, 50);

                controls = new THREE.TrackballControls( camera );

                controls.rotateSpeed = 5.0;
                controls.zoomSpeed = 5;
                controls.panSpeed = 2;
                controls.object.up.y = -controls.object.up.y;

                controls.noZoom = false;
                controls.noPan = false;

                controls.staticMoving = true;
                controls.dynamicDampingFactor = 0.3;

                scene = new THREE.Scene();
                scene.add( camera );

                var onProgress = function( xhr ) {
                    var bar = 250
                    bar = Math.floor( bar * xhr.loaded / xhr.total );

                    $( "#bar" ).width(bar);
                    $( "#message").text("Loading: " + Math.floor(xhr.loaded / xhr.total * 100) + "%");
                };

                var onLoad = function ( geometry ) {
                    $( "#message" ).hide();
                    $( "#progressbar" ).hide();
                    $( "#progress" ).hide();

                    //var geometry = object.content;
                    var material = new THREE.PointsMaterial({ vertexColors: true, size: 0.5 }); 
                    var mesh = new THREE.Points(geometry, material);
                    
                    var box = new THREE.Box3().setFromObject( mesh );
                    
                    var average = new THREE.Vector3();
                    for (var i = 0; i < geometry.vertices.length; i++)
                    {
                        average.add(geometry.vertices[i]);
                    }
                    var scale = -1.0/geometry.vertices.length;
                    average.multiplyScalar(scale);

                    for (var i = 0; i < geometry.vertices.length; i++)
                    {
                        geometry.vertices[i].add(average);
                    }

                    var scale = (50/box.getSize().x);
                    mesh.scale.multiplyScalar( scale );

                    mesh.castShadow = true;
                    mesh.receiveShadow = true;

                    /*
                    var boxGeometry = new THREE.BoxGeometry( 10, 10, 10 );
                    cube = new THREE.Mesh( boxGeometry, new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff, opacity: 1 } ) );
                    cube.position = scene.position;

                    scene.add(cube);
                    */
                    
                    scene.add(mesh);
                    /*
                    geometry.computeFaceNormals();

                    var material = new THREE.MeshStandardMaterial( { color: 0x0055ff } );
                    var mesh = new THREE.Mesh( geometry, material );

                    mesh.position.y = - 0.25;
                    mesh.rotation.x = - Math.PI / 2;
                    mesh.scale.multiplyScalar( 0.001 );

                    mesh.castShadow = true;
                    mesh.receiveShadow = true;

                    scene.add( mesh );
                    */
                }; 

                // Function called when download errors
                var onError = function ( xhr ) {
                    $( "#message").text("This model is unavailable");
                    $( "#progressbar" ).hide();
                    $( "#progress" ).hide();
                }

                //
                checkResource("<?= htmlspecialchars($modelPath); ?>");

                // PLY file
                var loader = new THREE.PLYLoader();
                loader.load( "<?= htmlspecialchars($modelPath); ?>", onLoad, onProgress, onError);

                // light
                var dirLight = new THREE.DirectionalLight( 0xffffff );
                dirLight.position.set( 200, 200, 1000 ).normalize();

                camera.add( dirLight );
                camera.add( dirLight.target );

                // renderer

                renderer = new THREE.WebGLRenderer( { antialias: true } );
                renderer.setPixelRatio( window.devicePixelRatio );
                renderer.setSize( window.innerWidth, window.innerHeight );

                renderer.gammaInput = true;
                renderer.gammaOutput = true;

                renderer.shadowMap.enabled = true;
                renderer.shadowMap.renderReverseSided = false;

                container.appendChild( renderer.domElement );

                // stats

                stats = new Stats();
                // don't display stats for now
                // container.appendChild( stats.dom );

                // resize

                window.addEventListener( 'resize', onWindowResize, false );

                $('body').keyup(function(e){
                   if(e.keyCode == 32){
                        rotateCamera = !rotateCamera;
                        var cameraPosition = camera.position;
                        var centerPoint = new THREE.Vector3();
                        centerPoint.copy(cameraPosition);
                        var cameraGaze = new THREE.Vector3(0, 0, -20);
                        centerPoint.add(cameraGaze);
                        cube.position = centerPoint;
                   }
                });
            }

            function addShadowedLight( x, y, z, color, intensity ) {

                var directionalLight = new THREE.DirectionalLight( color, intensity );
                directionalLight.position.set( x, y, z );
                scene.add( directionalLight );

                directionalLight.castShadow = true;

                var d = 1;
                directionalLight.shadow.camera.left = -d;
                directionalLight.shadow.camera.right = d;
                directionalLight.shadow.camera.top = d;
                directionalLight.shadow.camera.bottom = -d;

                directionalLight.shadow.camera.near = 1;
                directionalLight.shadow.camera.far = 4;

                directionalLight.shadow.mapSize.width = 1024;
                directionalLight.shadow.mapSize.height = 1024;

                directionalLight.shadow.bias = -0.005;

            }

            function onWindowResize() {

                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();

                renderer.setSize( window.innerWidth, window.innerHeight );

                controls.handleResize();
            }

            function animate() {

                requestAnimationFrame( animate );

                controls.update();

                if (rotateCamera){
                    var timer = Date.now() * 0.0005;
                    camera.position = Math.sin(timer) * 2.5;
                }

                renderer.render( scene, camera );
                //stats.update();
            }

            function checkResource (url) {
                var req = new XMLHttpRequest();
                req.open('HEAD', url, true);
                req.send();
                if (req.status === 404 || req.status === 403) {
                    $( "#message").text("This model is unavailable");
                    $( "#progressbar" ).hide();
                    $( "#progress" ).hide();
                }
            }

        </script>
    </body>
</html>
